***************Add students php file****************


 <?php
# Get data to input
$first_name = filter_input(INPUT_POST, "first_name");
$last_name = filter_input(INPUT_POST, "last_name");
$email = filter_input(INPUT_POST, "email");
$street = filter_input(INPUT_POST, "street");
$city = filter_input(INPUT_POST, "city");
$state = filter_input(INPUT_POST, "state");
$zip = filter_input(INPUT_POST, "zip");
$phone = filter_input(INPUT_POST, "phone");
$birth_date = filter_input(INPUT_POST, "birthdate");
$sex = filter_input(INPUT_POST, "sex");
$lunch_cost = filter_input(INPUT_POST, "lunch", FILTER_VALIDATE_FLOAT);
# Create a timestamp for now
$date_entered = date('Y-m-d H:i:s');

# Verify that eveything has been entered
if($first_name == null || $last_name == null || $email == null ||
$street == null || $city == null || $state == null ||
$zip == null || $phone == null || $birth_date == null ||
$sex == null || $lunch_cost == false){
  # Print an error if values aren't entered
  $err_msg = "All Values Not Entered<br>";
  include('db_error.php');

  # Validate Data with Regular Expressions
  # Regular Expressions are codes used to match patterns
  # Check if first name contains only characters with a max of 30
  # i allowed numbers for testing
} elseif(!preg_match("/[a-zA-Z]{3,30}$/", $first_name)){
  $err_msg = "First Name Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/[a-zA-Z 0-9]{3,30}$/", $last_name)){
  $err_msg = "Last Name Not Valid must be 3 - 30 char Letter Only<br>";
  include('db_error.php');
} elseif(!filter_var($email, FILTER_VALIDATE_EMAIL)){
  $err_msg = "Email Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/^[A-Za-z0-9 ,#'\/.]{3,50}$/", $street)){
  $err_msg = "Street Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/[a-zA-Z\- ]{2,58}$/", $city)){
  $err_msg = "City Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/^(?:A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])*$/", $state)){
  $err_msg = "State Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/[0-9]{5}$/", $zip)){
  $err_msg = "Zip Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/(([0-9]{1})*[- .(]*([0-9]{3})[- .)]*[0-9]{3}[- .]*[0-9]{4})+$/", $phone)){
  $err_msg = "Phone Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/[0-9- ]{8,12}$/", $birth_date)){
  $err_msg = "Birth Date Not Valid<br>";
  include('db_error.php');
} elseif(!preg_match("/[MF]{1}$/", $sex)){
  $err_msg = "Sex Not Valid<br>";
  include('db_error.php');
} else {
  require_once('db_connect.php');
  # Create your query using : to add parameters to the statement
  $query = 'INSERT INTO students (first_name, last_name, email,
    street, city, state, zip, phone, birth_date, sex, date_entered,
    lunch_cost, student_id) VALUES
    (:first_name, :last_name, :email, :street, :city, :state, :zip, :phone, :birth_date, :sex, :date_entered, :lunch_cost, :student_id)';

  # Create a PDOStatement object
  $stm = $db->prepare($query);
  # Bind values to parameters in the prepared statement
  $stm->bindValue(':first_name', $first_name);
  $stm->bindValue(':last_name', $last_name);
  $stm->bindValue(':email', $email);
  $stm->bindValue(':street', $street);
  $stm->bindValue(':city', $city);
  $stm->bindValue(':state', $state);
  $stm->bindValue(':zip', $zip);
  $stm->bindValue(':phone', $phone);
  $stm->bindValue(':birth_date', $birth_date);
  $stm->bindValue(':sex', $sex);
  $stm->bindValue(':date_entered', $date_entered);
  $stm->bindValue(':lunch_cost', $lunch_cost);
  $stm->bindValue(':student_id', null, PDO::PARAM_INT);
  # Execute the query and store true or false based on success
  $execute_success = $stm->execute();
  $stm->closeCursor();

  # If an error occurred print the error
  if(!$execute_success){
    print_r($stm->errorInfo()[2]);
  }
}

require_once('db_connect.php');
$query_students = 'SELECT * FROM students ORDER BY student_id';
$student_statement = $db->prepare($query_students);
$student_statement->execute();
$students = $student_statement->fetchAll();
$student_statement->closeCursor();
 ?>
 
<!DOCTYPE HTML>
 <html lang="en">
   <head>
     <meta charset="UTF-8">
     <title>PHP Tutorial</title>
     <link rel="stylesheet" type="text/css" href="main.css" />
   </head>
   <body>
   <!-- video 1.20 - 1.41  -->
     <h3>Student List</h3>
     <table>
       <tr>
         <th>ID</th>
         <th>Name</th>
         <th>Email</th>
         <th>Street</th>
         <th>City</th>
         <th>State</th>
         <th>Zip</th>
         <th>Phone</th>
         <th>BD</th>
         <th>Sex</th>
         <th>Entered</th>
         <th>Lunch</th>
       </tr>
       <!-- Get an array from the DB query and cycle
       through each row of data -->
       <?php foreach($students as $student) : ?>
         <tr>
           <!-- Print out individual column data -->
           <td><?php echo $student['student_id']; ?></td>
           <td><?php echo $student['first_name'] . ' ' . $student['last_name']; ?></td>
           <td><?php echo $student['email']; ?></td>
           <td><?php echo $student['street']; ?></td>
           <td><?php echo $student['city']; ?></td>
           <td><?php echo $student['state']; ?></td>
           <td><?php echo $student['zip']; ?></td>
           <td><?php echo $student['phone']; ?></td>
           <td><?php echo $student['birth_date']; ?></td>
           <td><?php echo $student['sex']; ?></td>
           <td><?php echo $student['date_entered']; ?></td>
           <td><?php echo $student['lunch_cost']; ?></td>
         </tr>
       <!-- Mark the end of the foreach loop -->
       <?php endforeach; ?>
     </table>
	 <br>
	 <hr>
     <h3>Update Student</h3>
     <form action="update_student.php" method="post"
       id="update_student_form">
       <label>Student ID : </label>
       <input type="text" name="student_id"><br>
       <label>First Name : </label>
       <input type="text" name="first_name"><br>
       <label>Last Name : </label>
       <input type="text" name="last_name"><br>
       <label>Email : </label>
       <input type="text" name="email"><br>
       <label>Street : </label>
       <input type="text" name="street"><br>
       <label>City : </label>
       <input type="text" name="city"><br>
       <label>State : </label>
       <input type="text" name="state"><br>
       <label>Zip Code : </label>
       <input type="text" name="zip"><br>
       <label>Phone : </label>
       <input type="text" name="phone"><br>
       <label>Birth Date : </label>
       <input type="text" name="birthdate"><br>
       <label>Sex : </label>
       <input type="text" name="sex"><br>
       <label>Lunch Cost : </label>
       <input type="text" name="lunch"><br>
       <input type="submit" value="Update Student"><br>
     </form>
   </body>
 </html>
 
 **************** db connection******************
 <?php
	DEFINE('DB_USER', 'studentweb');
	DEFINE('DB_PASSWORD', 'student');

	# Defines the data source name which is MySQL, local
# and the DB to use
	$dsn = 'mysql:host=localhost;dbname=students';
 
# Try to connect and if we get an error display it
# and call for an error page to load
try{
	$db = new PDO($dsn, DB_USER, DB_PASSWORD);
	} 
	catch (PDOException $e)
	{
		$err_msg = $e->getMessage();
		include('db_error.php');
		exit();
	}

?>

*******************Delete Data ***************
<?php
# Get data to input
$student_id = filter_input(INPUT_POST, "student_id", FILTER_VALIDATE_INT);
 
# Verify that eveything has been entered
if($student_id == null){
  # Print an error if values aren't entered
  $err_msg = "All Values Not Entered";
  include('db_error.php');
} else {
  require_once('db_connect.php');
  # Create your query using : to add parameters to the statement
  $query = 'DELETE FROM students
            WHERE student_id = :student_id';
 
  # Create a PDOStatement object
  $stm = $db->prepare($query);
  # Bind values to parameters in the prepared statement
  $stm->bindValue(':student_id', $student_id);
  # Execute the query and store true or false based on success
  $execute_success = $stm->execute();
  $stm->closeCursor();
 
  # If an error occurred print the error
  if(!$execute_success){
    print_r($stm->errorInfo()[2]);
  }
}
 
require_once('db_connect.php');
$query_students = 'SELECT * FROM students ORDER BY student_id';
$student_statement = $db->prepare($query_students);
$student_statement->execute();
$students = $student_statement->fetchAll();
$student_statement->closeCursor();
 ?>

 
<!DOCTYPE HTML>
 <html lang="en">
   <head>
     <meta charset="UTF-8">
     <title>PHP Tutorial</title>
     <link rel="stylesheet" type="text/css" href="main.css" />
   </head>
   <body>
     <h3>Student List</h3>
     <table>
       <tr>
         <th>ID</th>
         <th>Name</th>
         <th>Email</th>
         <th>Street</th>
         <th>City</th>
         <th>State</th>
         <th>Zip</th>
         <th>Phone</th>
         <th>BD</th>
         <th>Sex</th>
         <th>Entered</th>
         <th>Lunch</th>
       </tr>
       <!-- Get an array from the DB query and cycle
       through each row of data -->
       <?php foreach($students as $student) : ?>
         <tr>
           <!-- Print out individual column data -->
           <td><?php echo $student['student_id']; ?></td>
           <td><?php echo $student['first_name'] . ' ' . $student['last_name']; ?></td>
           <td><?php echo $student['email']; ?></td>
           <td><?php echo $student['street']; ?></td>
           <td><?php echo $student['city']; ?></td>
           <td><?php echo $student['state']; ?></td>
           <td><?php echo $student['zip']; ?></td>
           <td><?php echo $student['phone']; ?></td>
           <td><?php echo $student['birth_date']; ?></td>
           <td><?php echo $student['sex']; ?></td>
           <td><?php echo $student['date_entered']; ?></td>
           <td><?php echo $student['lunch_cost']; ?></td>
         </tr>
       <!-- Mark the end of the foreach loop -->
       <?php endforeach; ?>
     </table>
	 <br>
	 <hr>
     <h2>Delete Student</h2>
     <form action="delete_student.php" method="post"
	 
       id="delete_student_form">
	   
       <label>Student ID : </label>
       <input type="text" name="student_id"><br><br>
       <input type="submit" value="Delete Student"><br>
     </form>
	 <hr>
   </body>
 </html>
 
 *******************MYSQL connector **************************
 <?php
	DEFINE('DB_USER', 'student2');
	DEFINE('DB_PASSWORD', 'student2xampp');
	DEFINE('DB_HOST', 'localhost');
	DEFINE('DB_NAME', 'students');
	//echo "In connect  : ";
	$DBC = @mysqli_connect(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME)
	or die('Could not connect to My sql: ' .
	mysqli_connect_error());
 

?>
***************Objects with PHP **************************


<!DOCTYPE HTML>
<html lang="en">
 <body>
  <h1> Object Oriented Programing</h1><br>
<?php
 
class Animal implements Singable{

	
	
	protected $name;
	protected $favorite_food;
	protected $sound;
	protected $id;
	
	public static $number_of_animals = 0;
	const PI = "3.14159";
	
	
	function getName(){
	
		// To refer to data stored in an object you proceed the name
		// of the attribute with $this->yourAttribute
	
		return $this->name;
	
	}
	
	function __construct(){
	
		// Generate a random id between 1 and 1000000
		
		$this->id = rand(100, 1000000);
		
		echo $this->id . " has been assigned<br />";
		
		// You access static attributes with Class::$static_att
		
		Animal::$number_of_animals++;
	
	}
	
	
	public function __destruct(){
	
		echo $this->name . " is being destroyed :(";
	
	}
	
	
	function __get($name){
		
		echo "Asked for " . $name . "<br />";
	
		return $this->$name;
		
	}
	
	
	
	// If you want to check for a valid attribute you could use switch
	
	function __set($name, $value){
	
		switch($name){
		
			case "name":
				$this->name = $value;
				break;
				
			case "favorite_food":
				$this->favorite_food = $value;
				break;
				
			case "sound":
				$this->sound = $value;
				break;
				
			default : 
				echo $name . "Not Found";
		
		}
		
		echo "Set " . $name . " to " . $value . "<br />";
	
	}
	
	// 2. We will override this method in the subclass
	function run(){
		
		
		echo $this->name . " runs<br />";
		
	}
	// 3. To keep a method from being overridden use final
	// You can use final on a class to keep classes from
	// being overridden as well
	final function what_is_good(){
		
		echo "Running is Good<br />";
		
	}
	
	// 4. You can use __toString to define what prints when
	// the object is called to print
	
	function __toString(){
		
		return $this->name . " says " . $this->sound .
		" give me some ". $this->favorite_food . " my id is " .
		$this->id . " total animals = " . Animal::$number_of_animals .
		"<br /><br />";
		
	}
	
	
	// 5. You must define any function defined in an interface
	
	public function sing(){
		
		echo $this->name . " sings 'Grrrr grr grrr grrrrrrrrr'<br />";
		
	}
	
	// 7. static methods can be called without the need for instantiation
	
	static function add_these($num1, $num2){
		
		return ($num1 + $num2) . "<br />";
		
	}
}
  
	
	// The statements $animal_one->att_name call __get
// We call static attributes like this Class::$static_var 

	
	
	// If we defined a constant in the class we would get its
	// value like this Class::CONTANT 
	
	echo "Favorite Number " . Animal::PI . "<br />";
	
	class Dog extends Animal implements Singable{
	
		// 2. You can override functions defined in the superclass
		function run(){
			
			
			echo $this->name . " runs like crazy<br />";
			
		}
		
		// 5. You must define any function defined in an interface
		
		public function sing(){
			
			echo $this->name . " sings 'Bow wow, woooow, woooooooooow'<br />";
			
		}
	
	
}

	// 5. PHP doesn't allow muliple inheritance
	// You need to use interfaces to get similar results
	// Interfaces allow you to define functions that must be implemented

	interface Singable{
		
		public function sing();
		
	}
	
	
	$animal_one = new Animal();

// These call __set

	$animal_one->name = "Spot";
	$animal_one->favorite_food = "Meat";
	$animal_one->sound = "Ruff";


	$animal_two = new Dog();

	$animal_two->name = "Grover";
	$animal_two->favorite_food = "Mushrooms";
	$animal_two->sound = "Grrrrrrr";
	
	// Even though we are referring to the Dog $number_of_animals it
// still increases even with subclasses

	echo $animal_one->name . " says " . $animal_one->sound .
			" give me some ". $animal_one->favorite_food . " my id is " .
			$animal_one->id . " total animals = " . Animal::$number_of_animals .
			"<br /><br />";
			
	echo $animal_two->name . " says " . $animal_two->sound .
		" give me some ". $animal_two->favorite_food . " my id is " .
		$animal_two->id . " total animals = " . Dog::$number_of_animals .
		"<br /><br />";
	
	// 2. Because of method overriding we get different results	
	$animal_one->run();
	$animal_two->run();
	// 3. final methods can't be overriden
$animal_one->what_is_good();

// 4. Example using __toString()

echo $animal_two;

// 5. You call a method defined in an interface like all others

$animal_two->sing();

 ?> 
  </body>
  </html>

 


